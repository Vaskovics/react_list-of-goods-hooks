{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","visibleGoods","NONE","sortType","setSortType","ALPHABET","sort","LENGTH","g1","g2","length","reverse","className","type","classNames","onClick","value","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,mEAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAY,UAAOL,GACzB,EAAgCE,mBAASH,EAASO,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAOA,OAAQD,GACN,KAAKR,EAASU,SACZJ,EAAaK,OACb,MAEF,KAAKX,EAASY,OACZN,EAAaK,MAAK,SAACE,EAAIC,GAAL,OAAYD,EAAGE,OAASD,EAAGC,UAWjD,OAJIX,GACFE,EAAaU,UAIb,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SAAU,UACV,CAAE,WAAYX,IAAaR,EAASU,WAEtCU,QAAS,kBAAMX,EAAYT,EAASU,WANtC,iCAWA,wBACEQ,KAAK,SACLD,UAAWE,IACT,SACA,aAAc,CAAE,WAAYX,IAAaR,EAASY,SAEpDQ,QAAS,kBAAMX,EAAYT,EAASY,SANtC,4BAWA,wBACEM,KAAK,SACLD,UAAWE,IACT,SAAU,aACV,CAAE,YAAaf,IAEjBgB,QAAS,kBAAMf,GAAc,SAAAgB,GAAK,OAAKA,MANzC,sBAWEjB,GAAcI,IAAaR,EAASO,OAEhC,wBACEW,KAAK,SACLD,UAAU,4BACVG,QA/DG,WACfX,EAAYT,EAASO,MACrBF,GAAc,IA0DJ,sBAUR,6BACE,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,6BAAgBA,GAAPA,cCnGrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b5a292b1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = [...goodsFromServer];\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const resetAll = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort();\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((g1, g2) => g1.length - g2.length);\n      break;\n\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success', { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(value => !value)}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortType !== SortType.NONE)\n            && (\n              <button\n                type=\"button\"\n                className=\"button is-danger is-light\"\n                onClick={resetAll}\n              >\n                Reset\n              </button>\n            )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li key={good}>{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}